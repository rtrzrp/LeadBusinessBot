document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
    
    // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const micButton = document.getElementById('main-mic-btn');
    const deviceSelect = document.getElementById('audio-devices');
    const logContainer = document.getElementById('log-container');
    const statusText = document.getElementById('status-text');
    const micStatusDot = document.getElementById('mic-status-dot');
    const timerDisplay = document.getElementById('elapsed-time');
    const fileInput = document.getElementById('audio-file');
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', {
        micButton: !!micButton,
        deviceSelect: !!deviceSelect,
        logContainer: !!logContainer,
        statusText: !!statusText,
        micStatusDot: !!micStatusDot,
        timerDisplay: !!timerDisplay,
        fileInput: !!fileInput
    });
    
    // –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (!micButton || !logContainer) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        alert('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã DOM!');
        return;
    }
    
    let mediaRecorder = null;
    let isRecording = false;
    let audioChunks = [];
    let timer = null;
    let seconds = 0;
    
    // –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    function log(message, type = 'info') {
        const entry = document.createElement('div');
        entry.className = `log-entry ${type}`;
        const time = new Date().toLocaleTimeString();
        entry.innerHTML = `<span class="timestamp">[${time}]</span> ${message}`;
        logContainer.insertBefore(entry, logContainer.firstChild);
        console.log(message);
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    async function initMicrophone() {
        try {
            log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...');
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            log('–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω!', 'success');
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            const devices = await navigator.mediaDevices.enumerateDevices();
            const audioDevices = devices.filter(d => d.kind === 'audioinput');
            
            log(`–ù–∞–π–¥–µ–Ω–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤: ${audioDevices.length}`, 'success');
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
            deviceSelect.innerHTML = '';
            audioDevices.forEach((device, index) => {
                const option = document.createElement('option');
                option.value = device.deviceId;
                option.textContent = device.label || `–ú–∏–∫—Ä–æ—Ñ–æ–Ω ${index + 1}`;
                deviceSelect.appendChild(option);
            });
            
            // –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
            deviceSelect.disabled = false;
            micButton.disabled = false;
            micStatusDot.classList.add('ok');
            
            // –í–ê–ñ–ù–û: –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å!
            statusText.textContent = '–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏';
            statusText.className = 'status-text';
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
            stream.getTracks().forEach(track => track.stop());
            
            log('üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!', 'success');
            
            return true;
            
        } catch (error) {
            log(`–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: ${error.message}`, 'error');
            micStatusDot.classList.remove('ok');
            return false;
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏
    async function startRecording() {
        try {
            log('üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å...');
            const deviceId = deviceSelect.value;
            let stream;

            if (settings.recordSystemAudio) {
                log('üéß –ó–∞–ø–∏—Å—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.');
                stream = await getMixedAudioStream(deviceId);
            } else {
                log('üé§ –ó–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.');
                const constraints = { audio: { deviceId: deviceId ? { exact: deviceId } : undefined } };
                stream = await navigator.mediaDevices.getUserMedia(constraints);
            }

            if (!stream) {
                log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫.', 'error');
                return;
            }

            log('‚úÖ –ü–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º MediaRecorder...');
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ì–û–õ–û–°–ê: WAV -> OGG
            let mimeType = '';
            
            if (MediaRecorder.isTypeSupported('audio/wav')) {
                mimeType = 'audio/wav';
            } else if (MediaRecorder.isTypeSupported('audio/ogg;codecs=opus')) {
                mimeType = 'audio/ogg;codecs=opus';
            } else if (MediaRecorder.isTypeSupported('audio/ogg')) {
                mimeType = 'audio/ogg';
            } else {
                // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ MP4, –Ω–æ —ç—Ç–æ –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –≥–æ–ª–æ—Å–∞
                mimeType = MediaRecorder.isTypeSupported('audio/mp4') ? 'audio/mp4' : '';
            }
            
            log(`üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${mimeType || '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—Ä–∞—É–∑–µ—Ä–∞'}`, 'success');
            
            const options = mimeType ? { mimeType } : {};
            mediaRecorder = new MediaRecorder(stream, options);
            audioChunks = [];
            
            mediaRecorder.ondataavailable = (event) => {
                if (event.data.size > 0) {
                    audioChunks.push(event.data);
                    log(`üìä –ü–æ–ª—É—á–µ–Ω chunk: ${(event.data.size / 1024).toFixed(1)} KB`);
                }
            };
            
            mediaRecorder.onstart = () => {
                log('üî¥ MediaRecorder –∑–∞–ø—É—â–µ–Ω');
            };
            
            mediaRecorder.onstop = () => {
                // –°–æ–∑–¥–∞–µ–º blob —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME —Ç–∏–ø–æ–º
                const finalMimeType = mimeType || 'audio/ogg';
                const audioBlob = new Blob(audioChunks, { type: finalMimeType });
                
                log(`‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–º–µ—Ä: ${(audioBlob.size / 1024).toFixed(1)} KB`, 'success');
                log(`üì¶ –¢–∏–ø —Ñ–∞–π–ª–∞: ${finalMimeType}`, 'info');
                
                if (audioBlob.size > 0) {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                    let extension = 'wav';
                    if (finalMimeType.includes('wav')) {
                        extension = 'wav';
                    } else if (finalMimeType.includes('ogg')) {
                        extension = 'ogg';
                    } else if (finalMimeType.includes('mp4')) {
                        extension = 'mp4';
                    }
                    
                    // –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º File –æ–±—ä–µ–∫—Ç —Å –∏–º–µ–Ω–µ–º –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                    const audioFile = new File([audioBlob], `recording.${extension}`, {
                        type: finalMimeType
                    });

                    log(`üéµ –°–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª: ${audioFile.name}`, 'info');
                    
                    processAudio(audioFile);
                } else {
                    log('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª', 'warning');
                }
            };
            
            mediaRecorder.onerror = (event) => {
                log(`‚ùå –û—à–∏–±–∫–∞ MediaRecorder: ${event.error}`, 'error');
            };
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 1 —Å–µ–∫—É–Ω–¥—É
            mediaRecorder.start(1000);
            isRecording = true;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            micButton.innerHTML = 'üõë';
            statusText.textContent = '–ò–¥–µ—Ç –∑–∞–ø–∏—Å—å...';
            statusText.className = 'status-text recording';
            micButton.classList.add('recording');
            
            // –í–∫–ª—é—á–∞–µ–º –≤–æ–ª–Ω—ã
            document.querySelector('.mic-container').classList.add('recording');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            seconds = 0;
            timer = setInterval(() => {
                seconds++;
                const minutes = Math.floor(seconds / 60);
                const secs = seconds % 60;
                timerDisplay.textContent = `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
            }, 1000);
            
            log('üéôÔ∏è –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å!', 'success');
            
        } catch (error) {
            log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏: ${error.message}`, 'error');
            console.error('Detailed error:', error);
        }
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
    function stopRecording() {
        if (mediaRecorder && isRecording) {
            mediaRecorder.stop();
            mediaRecorder.stream.getTracks().forEach(track => track.stop());
            
            clearInterval(timer);
            isRecording = false;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            micButton.innerHTML = '<svg class="mic-icon" viewBox="0 0 24 24" fill="currentColor"><path d="M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z"></path></svg>';
            statusText.textContent = '–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏';
            statusText.className = 'status-text';
            micButton.classList.remove('recording');
            
            log('–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'info');
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ (–∑–∞–≥–ª—É—à–∫–∞)
    async function processAudio(audioBlob) {
        log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...', 'info');
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Nexara API
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ñ–∞–π–ª –≥–æ—Ç–æ–≤
        setTimeout(() => {
            log('–ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ!', 'success');
        }, 1000);
    }
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event listeners
    console.log('‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event listeners...');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    try {
        micButton.addEventListener('click', async (event) => {
            console.log('üñ±Ô∏è –ö–õ–ò–ö –ü–û –ú–ò–ö–†–û–§–û–ù–£!');
            event.preventDefault();
            log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞');
            
            try {
                if (isRecording) {
                    log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å...');
                    stopRecording();
                } else {
                    log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å...');
                    await startRecording();
                }
            } catch (error) {
                log(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏: ${error.message}`, 'error');
                console.error('Button handler error:', error);
            }
        });
        console.log('‚úÖ Event listener –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ event listener –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', error);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    try {
        fileInput.addEventListener('change', async (event) => {
            console.log('üìé –í–´–ë–†–ê–ù –§–ê–ô–õ!');
            log('üìé –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
            
            const file = event.target.files[0];
            if (!file) {
                log('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'warning');
                return;
            }
            
            log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${file.name} (${(file.size / 1024).toFixed(1)} KB)`);
            
            try {
                await processAudio(file);
            } catch (error) {
                log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`, 'error');
            } finally {
                event.target.value = ''; // –°–±—Ä–æ—Å–∏—Ç—å input
            }
        });
        console.log('‚úÖ Event listener –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ event listener –¥–ª—è —Ñ–∞–π–ª–æ–≤:', error);
    }
    
    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', (e) => {
        if (e.target.tagName === 'INPUT') return;
        
        if (e.code === 'Space') {
            e.preventDefault();
            micButton.click();
        }
    });
    
    // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞
    document.getElementById('clear-log')?.addEventListener('click', () => {
        logContainer.innerHTML = '';
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    document.querySelector('.theme-toggle')?.addEventListener('click', () => {
        document.body.classList.toggle('dark-theme');
        document.body.classList.toggle('light-theme');
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    let settings = {
        apiKey: '',
        baseUrl: 'https://api.nexara.ru/api/v1',
        userName: '',
        telegramId: '',
        diarization: false,
        language: 'auto',
        recordSystemAudio: false,
        webhooks: [{ name: 'Default', url: '' }],
        activeWebhookIndex: 0
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    function loadSettings() {
        const saved = localStorage.getItem('nexaraSettings');
        if (saved) {
            try {
                const savedSettings = JSON.parse(saved);
                // Ensure webhooks is an array
                if (!Array.isArray(savedSettings.webhooks) || savedSettings.webhooks.length === 0) {
                    savedSettings.webhooks = [{ name: 'Default', url: '' }];
                }
                settings = { ...settings, ...savedSettings };
            } catch (e) {
                log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'warning');
            }
        }
        renderSettings();
    }

    // –†–µ–Ω–¥–µ—Ä UI –Ω–∞—Å—Ç—Ä–æ–µ–∫
    function renderSettings() {
        document.getElementById('nexara-api-key').value = settings.apiKey;
        document.getElementById('base-url').value = settings.baseUrl;
        document.getElementById('user-name').value = settings.userName;
        document.getElementById('telegram-id').value = settings.telegramId;
        document.getElementById('diarization').checked = settings.diarization;
        document.getElementById('language-select').value = settings.language;
        document.getElementById('system-audio-record').checked = settings.recordSystemAudio;
        renderPresets();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    function saveSettings() {
        settings.apiKey = document.getElementById('nexara-api-key').value.trim();
        settings.baseUrl = document.getElementById('base-url').value.trim();
        settings.userName = document.getElementById('user-name').value.trim();
        settings.telegramId = document.getElementById('telegram-id').value.trim();
        settings.diarization = document.getElementById('diarization').checked;
        settings.language = document.getElementById('language-select').value;
        settings.recordSystemAudio = document.getElementById('system-audio-record').checked;
        
        const presetList = document.getElementById('preset-list');
        settings.webhooks = Array.from(presetList.children).map(item => ({
            name: item.querySelector('.preset-name').value.trim(),
            url: item.querySelector('.preset-url').value.trim()
        })).filter(p => p.name && p.url);

        const activeWebhookSelect = document.getElementById('active-webhook');
        settings.activeWebhookIndex = activeWebhookSelect.selectedIndex;

        localStorage.setItem('nexaraSettings', JSON.stringify(settings));
        log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
        renderPresets(); // Re-render to ensure consistency
    }

    // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settingsHeader = document.querySelector('.collapsible-header');
    const settingsPanel = document.querySelector('.settings-panel');
    
    settingsHeader.addEventListener('click', () => {
        settingsPanel.classList.toggle('closed');
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    document.getElementById('save-settings').addEventListener('click', saveSettings);

    // –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ –ù–ê–® –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –°–ï–†–í–ï–†
    async function transcribeAudio(audioFile) {
        if (!settings.apiKey) {
            log('API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!', 'error');
            return null;
        }

        const url = "/api/transcribe"; // –ù–æ–≤—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL
        
        try {
            log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä...');
            
            const formData = new FormData();
            formData.append("file", audioFile);
            formData.append("response_format", "json");
            if (settings.diarization) {
                formData.append('task', 'diarize');
            }
            // –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ "auto"
            if (settings.language && settings.language !== 'auto') {
                formData.append('language', settings.language);
                log(`üó£Ô∏è –Ø–∑—ã–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${settings.language}`, 'info');
            }

            const response = await fetch(url, {
                method: "POST",
                headers: { 'x-nexara-api-key': settings.apiKey },
                body: formData,
            });

            log(`üì° –û—Ç–≤–µ—Ç –æ—Ç –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.status}`, 'info');

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || JSON.stringify(errorData));
            }

            const result = await response.json();

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è webhook
            const transcriptionResult = {
                formattedText: result.text || (result.segments ? result.segments.map(s => `${s.speaker}: ${s.text}`).join('\n') : ''),
                rawResponse: result,
                isDiarized: result.task === 'diarize'
            };

            log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: ${transcriptionResult.formattedText.substring(0, 50)}...`, 'success');
            if (transcriptionResult.isDiarized) {
                log(`üé≠ –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è: ${result.segments?.length || 0} —Å–µ–≥–º–µ–Ω—Ç–æ–≤`, 'info');
            }
            return transcriptionResult;

        } catch (error) {
            log(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${error.message}`, 'error');
            return null;
        }
    }

    // –†–µ–Ω–¥–µ—Ä –ø—Ä–µ—Å–µ—Ç–æ–≤
    function renderPresets() {
        const presetList = document.getElementById('preset-list');
        const activeWebhookSelect = document.getElementById('active-webhook');
        presetList.innerHTML = '';
        activeWebhookSelect.innerHTML = '';

        if (settings.webhooks.length === 0) {
            // Add a default empty preset if the list is empty
            settings.webhooks.push({ name: '', url: '' });
        }

        settings.webhooks.forEach((preset, index) => {
            addPresetToDOM(preset.name, preset.url);
            const option = document.createElement('option');
            option.value = index;
            option.textContent = preset.name || `–ü—Ä–µ—Å–µ—Ç ${index + 1}`;
            activeWebhookSelect.appendChild(option);
        });

        if (settings.activeWebhookIndex >= 0 && settings.activeWebhookIndex < settings.webhooks.length) {
            activeWebhookSelect.selectedIndex = settings.activeWebhookIndex;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –≤ DOM
    function addPresetToDOM(name = '', url = '') {
        const presetList = document.getElementById('preset-list');
        const item = document.createElement('div');
        item.className = 'preset-item';
        item.innerHTML = `
            <input type="text" class="preset-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" value="${name}">
            <input type="url" class="preset-url" placeholder="URL" value="${url}">
            <button class="delete-btn">üóëÔ∏è</button>
        `;
        item.querySelector('.delete-btn').addEventListener('click', () => {
            item.remove();
            // User must click save to persist deletion
        });
        presetList.appendChild(item);
    }
    
    document.getElementById('add-preset').addEventListener('click', () => addPresetToDOM());


    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ webhook —á–µ—Ä–µ–∑ –ù–ê–® –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –°–ï–†–í–ï–†
    async function sendToWebhook(transcriptionResult) {
        const activePreset = settings.webhooks[settings.activeWebhookIndex];
        if (!activePreset || !activePreset.url) {
            log('–ê–∫—Ç–∏–≤–Ω—ã–π Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'warning');
            return;
        }
        if (!transcriptionResult) {
            log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏', 'warning');
            return;
        }

        const url = "/api/webhook";

        try {
            log(`üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø—Ä–µ—Å–µ—Ç "${activePreset.name}"...`);

            const serverPayload = {
                webhookUrl: activePreset.url,
                payload: {
                    name: settings.userName || 'Unknown',
                    date: new Date().toISOString(),
                    tg_id: settings.telegramId || '',
                    text: transcriptionResult.formattedText || '',
                    transcription_data: transcriptionResult.rawResponse || null
                }
            };

            const response = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(serverPayload)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || JSON.stringify(errorData));
            }

            log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
            
        } catch (error) {
            log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: ${error.message}`, 'error');
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
    async function processAudio(audioBlob) {
        const transcriptionResult = await transcribeAudio(audioBlob);
        if (transcriptionResult) {
            log(`üìÑ –¢–µ–∫—Å—Ç: "${transcriptionResult.formattedText.substring(0, 100)}${transcriptionResult.formattedText.length > 100 ? '...' : ''}"`, 'info');
            await sendToWebhook(transcriptionResult);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    loadSettings();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
    const micAccess = await initMicrophone();
    
    if (micAccess) {
        log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!', 'success');
        log('üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á –∏ webhook –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö', 'info');
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º UI
        micButton.disabled = false;
        statusText.textContent = '–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏';
        statusText.className = 'status-text';
        
        log('üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –º–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å!', 'info');
        
    } else {
        log('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É', 'warning');
        log('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞', 'info');
        statusText.textContent = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É';
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –ø—Ä–æ–±—É–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ
        micButton.addEventListener('click', async () => {
            const success = await initMicrophone();
            if (success) {
                // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
                setTimeout(() => startRecording(), 500);
            }
        }, { once: true });
    }

    // –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–û–°–¢–ò
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
    setTimeout(() => {
        try {
            console.log('–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞');
            console.log('micButton.disabled:', micButton.disabled);
            console.log('micButton.style.pointerEvents:', micButton.style.pointerEvents);
            console.log('micButton.getBoundingClientRect():', micButton.getBoundingClientRect());
            
            console.log('–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
            console.log('fileInput.disabled:', fileInput.disabled);
            console.log('fileInput.style.display:', fileInput.style.display);
            
            log('üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.', 'info');
            log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–ª–∏–∫–Ω—É—Ç—å —Å–µ–π—á–∞—Å - –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏!', 'info');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
        }
    }, 1000);

    // --- –õ–æ–≥–∏–∫–∞ —Å–º–µ—à–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ ---
    async function getMixedAudioStream(microphoneId) {
        let displayStream, micStream;
        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞—É–¥–∏–æ
            log('üñ•Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞/–≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∑–≤—É–∫–∞...');
            displayStream = await navigator.mediaDevices.getDisplayMedia({
                video: true,
                audio: true
            });

            const displayAudioTrack = displayStream.getAudioTracks()[0];
            if (!displayAudioTrack) {
                log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–∑—Ä–µ—à–∏–ª). –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω.', 'warning');
                displayStream.getTracks().forEach(track => track.stop()); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–π –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫
                return navigator.mediaDevices.getUserMedia({ audio: { deviceId: microphoneId ? { exact: microphoneId } : undefined } });
            }
             log('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –ø–æ–ª—É—á–µ–Ω.');

            // 2. –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            log('üé§ –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...');
            micStream = await navigator.mediaDevices.getUserMedia({ audio: { deviceId: microphoneId ? { exact: microphoneId } : undefined } });
            const micAudioTrack = micStream.getAudioTracks()[0];
             log('‚úÖ –ó–≤—É–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω.');

            // 3. –°–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
            log('üéß –°–º–µ—à–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–æ–≤...');
            const audioContext = new AudioContext();
            
            // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ AudioContext –∞–∫—Ç–∏–≤–µ–Ω
            if (audioContext.state === 'suspended') {
                await audioContext.resume();
            }

            const destination = audioContext.createMediaStreamDestination();

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            const displaySource = audioContext.createMediaStreamSource(displayStream);
            displaySource.connect(destination);

            const micSource = audioContext.createMediaStreamSource(micStream);
            micSource.connect(destination);
            
            // 4. –°–æ–∑–¥–∞–µ–º –ò–¢–û–ì–û–í–´–ô –ü–û–¢–û–ö —Ç–æ–ª—å–∫–æ –∏–∑ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
            const mixedAudioTrack = destination.stream.getAudioTracks()[0];
            const finalStream = new MediaStream([mixedAudioTrack]);
            
            log('‚úÖ –ü–æ—Ç–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–º–µ—à–∞–Ω—ã.');

            // –°–ª–µ–¥–∏–º –∑–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç —à–∞—Ä–∏–Ω–≥
            displayStream.getTracks().forEach(track => {
                track.onended = () => {
                    log('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.', 'info');
                    stopRecording();
                };
            });

            return finalStream;

        } catch (error) {
            log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –ø–æ—Ç–æ–∫–æ–≤: ${error.message}`, 'error');
            // –í–∞–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            displayStream?.getTracks().forEach(track => track.stop());
            micStream?.getTracks().forEach(track => track.stop());
            return null;
        }
    }
});
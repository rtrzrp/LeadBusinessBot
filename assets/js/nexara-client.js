const NexaraClient = (() => {

    async function transcribe(audioBlob) {
        const settings = SettingsManager.getSettings();
        
        if (!settings.apiKey) {
            throw new Error('API –∫–ª—é—á Nexara –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        }

        const formData = new FormData();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ blob
        let fileName = 'recording.webm';
        if (audioBlob.type) {
            if (audioBlob.type.includes('mp3')) fileName = 'recording.mp3';
            else if (audioBlob.type.includes('wav')) fileName = 'recording.wav';
            else if (audioBlob.type.includes('mp4')) fileName = 'recording.mp4';
        }
        
        formData.append('file', audioBlob, fileName);

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if (settings.diarization) {
            formData.append('task', 'diarize');

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
            if (settings.numSpeakers && settings.numSpeakers.trim()) {
                const numSpeakers = parseInt(settings.numSpeakers);
                if (numSpeakers > 0 && numSpeakers <= 10) {
                    formData.append('num_speakers', numSpeakers.toString());
                    logActivity(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤: ${numSpeakers}`, 'info');
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
            formData.append('diarization_setting', settings.diarizationSetting || 'general');
            logActivity(`–†–µ–∂–∏–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: ${settings.diarizationSetting || 'general'}`, 'info');

            // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º response_format –ø—Ä–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ - API –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –µ–≥–æ
        } else {
            // –î–ª—è –æ–±—ã—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º response_format
            formData.append('response_format', 'json');
        }

        logActivity('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...');
        
        try {
            const response = await fetch(`${settings.baseUrl}/audio/transcriptions`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${settings.apiKey}`
                },
                body: formData
            });

            if (!response.ok) {
                let errorMessage = `HTTP ${response.status}`;
                
                try {
                    const errorData = await response.json();
                    errorMessage = errorData.error?.message || errorData.detail || errorMessage;
                } catch (e) {
                    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å
                }
                
                throw new Error(errorMessage);
            }

            const result = await response.json();

            // –û—Ç–ª–∞–¥–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API
            console.log('Nexara API Response:', result);
            logActivity(`üìã API Response: task=${result.task}, segments=${result.segments?.length || 0}`, 'info');

            let transcriptText = '';

            if (settings.diarization && result.task === 'diarize') {
                // –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∞
                if (result.segments && result.segments.length > 0) {
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    transcriptText = result.segments
                        .map(segment => `${segment.speaker}: ${segment.text}`)
                        .join('\n');

                    logActivity(`‚úÖ –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ (${result.segments.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤)`, 'success');
                    logActivity(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–ø–∏–∫–µ—Ä–æ–≤: ${new Set(result.segments.map(s => s.speaker)).size}`, 'info');
                } else {
                    // –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–∞, –Ω–æ segments –ø—É—Å—Ç—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    transcriptText = result.text || '';
                    logActivity(`‚ö†Ô∏è –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è: segments –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç`, 'warning');
                    console.warn('Diariazation requested but segments empty:', result);
                }
            } else {
                // –û–±—ã—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
                transcriptText = result.text || '';
                logActivity(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ (${transcriptText.length} —Å–∏–º–≤–æ–ª–æ–≤)`, 'success');
            }
            
            if (!transcriptText.trim()) {
                throw new Error('–ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è');
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –ø–æ–ª–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º API
            return {
                formattedText: transcriptText.trim(),
                rawResponse: result,
                isDiarized: settings.diarization && result.task === 'diarize'
            };

        } catch (error) {
            const errorMsg = `–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${error.message}`;
            logActivity(errorMsg, 'error');
            
            // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –±—Ä–æ—Å–æ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
            throw new Error(error.message);
        }
    }

    function validateSettings() {
        const settings = SettingsManager.getSettings();
        
        if (!settings.apiKey) {
            return { valid: false, error: 'API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω' };
        }
        
        if (!settings.baseUrl) {
            return { valid: false, error: 'Base URL –Ω–µ —É–∫–∞–∑–∞–Ω' };
        }
        
        return { valid: true };
    }

    async function testConnection() {
        const validation = validateSettings();
        if (!validation.valid) {
            throw new Error(validation.error);
        }

        // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const testBlob = new Blob(['test'], { type: 'audio/webm' });
        
        try {
            await transcribe(testBlob);
            return true;
        } catch (error) {
            throw new Error(`–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è: ${error.message}`);
        }
    }

    async function testDiarization() {
        const settings = SettingsManager.getSettings();

        if (!settings.apiKey) {
            throw new Error('API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω');
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–º
        const testData = new Uint8Array(1024); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        const testBlob = new Blob([testData], { type: 'audio/webm' });

        logActivity('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...', 'info');

        const formData = new FormData();
        formData.append('file', testBlob, 'test-diarization.webm');
        formData.append('task', 'diarize');
        formData.append('diarization_setting', 'general');

        try {
            const response = await fetch(`${settings.baseUrl}/audio/transcriptions`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${settings.apiKey}`
                },
                body: formData
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || `HTTP ${response.status}`);
            }

            const result = await response.json();
            console.log('Diariazation test result:', result);

            if (result.segments && result.segments.length > 0) {
                logActivity(`‚úÖ –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ ${result.segments.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤`, 'success');
                return result;
            } else {
                logActivity(`‚ö†Ô∏è –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è: segments –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ API –æ—Ç–≤–µ—Ç–∏–ª`, 'warning');
                return result;
            }

        } catch (error) {
            logActivity(`‚ùå –¢–µ—Å—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª—Å—è: ${error.message}`, 'error');
            throw error;
        }
    }

    return {
        transcribe,
        validateSettings,
        testConnection,
        testDiarization
    };

})();
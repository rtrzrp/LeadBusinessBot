const NexaraClient = (() => {

    async function transcribe(audioBlob) {
        const settings = SettingsManager.getSettings();
        
        if (!settings.apiKey) {
            throw new Error('API –∫–ª—é—á Nexara –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        }

        const formData = new FormData();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ blob
        let fileName = 'recording.webm';
        if (audioBlob.type) {
            if (audioBlob.type.includes('mp3')) fileName = 'recording.mp3';
            else if (audioBlob.type.includes('wav')) fileName = 'recording.wav';
            else if (audioBlob.type.includes('mp4')) fileName = 'recording.mp4';
        }
        
        formData.append('file', audioBlob, fileName);
        formData.append('response_format', 'json');

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if (settings.diarization) {
            formData.append('task', 'diarize');
            formData.append('diarization_setting', 'general');
        }

        logActivity('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...');
        
        try {
            const response = await fetch(`${settings.baseUrl}/audio/transcriptions`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${settings.apiKey}`
                },
                body: formData
            });

            if (!response.ok) {
                let errorMessage = `HTTP ${response.status}`;
                
                try {
                    const errorData = await response.json();
                    errorMessage = errorData.error?.message || errorData.detail || errorMessage;
                } catch (e) {
                    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å
                }
                
                throw new Error(errorMessage);
            }

            const result = await response.json();
            
            let transcriptText = '';
            
            if (settings.diarization && result.segments) {
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                transcriptText = result.segments
                    .map(segment => `${segment.speaker}: ${segment.text}`)
                    .join('\n');
                
                logActivity(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ (${result.segments.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤, ${transcriptText.length} —Å–∏–º–≤–æ–ª–æ–≤)`, 'success');
            } else {
                // –û–±—ã—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
                transcriptText = result.text || '';
                logActivity(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ (${transcriptText.length} —Å–∏–º–≤–æ–ª–æ–≤)`, 'success');
            }
            
            if (!transcriptText.trim()) {
                throw new Error('–ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è');
            }
            
            return transcriptText.trim();

        } catch (error) {
            const errorMsg = `–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${error.message}`;
            logActivity(errorMsg, 'error');
            
            // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –±—Ä–æ—Å–æ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
            throw new Error(error.message);
        }
    }

    function validateSettings() {
        const settings = SettingsManager.getSettings();
        
        if (!settings.apiKey) {
            return { valid: false, error: 'API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω' };
        }
        
        if (!settings.baseUrl) {
            return { valid: false, error: 'Base URL –Ω–µ —É–∫–∞–∑–∞–Ω' };
        }
        
        return { valid: true };
    }

    async function testConnection() {
        const validation = validateSettings();
        if (!validation.valid) {
            throw new Error(validation.error);
        }

        // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const testBlob = new Blob(['test'], { type: 'audio/webm' });
        
        try {
            await transcribe(testBlob);
            return true;
        } catch (error) {
            throw new Error(`–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è: ${error.message}`);
        }
    }

    return {
        transcribe,
        validateSettings,
        testConnection
    };

})();
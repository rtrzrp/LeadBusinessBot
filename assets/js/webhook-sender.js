const WebhookSender = (() => {

    async function send(transcriptionResult) {
        const activeWebhook = SettingsManager.getActiveWebhook();
        const settings = SettingsManager.getSettings();

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!activeWebhook || !activeWebhook.url) {
            logActivity('‚ö†Ô∏è Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', 'warning');
            return false;
        }

        if (!transcriptionResult) {
            logActivity('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ webhook', 'warning');
            return false;
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ payload —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        const payload = {
            name: settings.userName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            date: new Date().toISOString(),
            tg_id: settings.telegramId || '',
            text: transcriptionResult.formattedText || transcriptionResult.text || '',
            transcription_data: transcriptionResult.rawResponse || null
        };

        logActivity(`üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ webhook: ${activeWebhook.name}...`);

        try {
            const response = await fetch(activeWebhook.url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'NexaraBot-Transcriber/1.0'
                },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                let errorMessage = `HTTP ${response.status} ${response.statusText}`;
                
                try {
                    const errorBody = await response.text();
                    if (errorBody) {
                        errorMessage += ` - ${errorBody}`;
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
                }
                
                throw new Error(errorMessage);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π
            let responseData;
            try {
                responseData = await response.text();
            } catch (e) {
                responseData = 'OK';
            }

            const textLength = payload.text.length;
            logActivity(`‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ "${activeWebhook.name}" (${textLength} —Å–∏–º–≤–æ–ª–æ–≤)`, 'success');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (payload.transcription_data && payload.transcription_data.task === 'diarize') {
                const segmentsCount = payload.transcription_data.segments?.length || 0;
                const speakersCount = new Set(payload.transcription_data.segments?.map(s => s.speaker) || []).size;
                logActivity(`üé≠ –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è: ${segmentsCount} —Å–µ–≥–º–µ–Ω—Ç–æ–≤, ${speakersCount} —Å–ø–∏–∫–µ—Ä–æ–≤`, 'info');
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
            const preview = payload.text.length > 100 ? payload.text.substring(0, 100) + '...' : payload.text;
            logActivity(`üìÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${preview}"`, 'info');
            
            return true;

        } catch (error) {
            const errorMsg = `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ webhook "${activeWebhook.name}": ${error.message}`;
            logActivity(errorMsg, 'error');
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (error.name === 'TypeError') {
                logActivity('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL webhook –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 'warning');
            }
            
            throw new Error(error.message);
        }
    }

    function validateWebhookSettings() {
        const activeWebhook = SettingsManager.getActiveWebhook();
        const settings = SettingsManager.getSettings();
        
        const issues = [];
        
        if (!activeWebhook || !activeWebhook.url) {
            issues.push('Webhook –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ URL –Ω–µ —É–∫–∞–∑–∞–Ω');
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
            try {
                new URL(activeWebhook.url);
            } catch (e) {
                issues.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL webhook');
            }
        }
        
        if (!settings.userName) {
            issues.push('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ');
        }
        
        // telegramId –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if (!settings.telegramId) {
            issues.push('Telegram ID –Ω–µ —É–∫–∞–∑–∞–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)');
        }
        
        return {
            valid: issues.length === 0,
            issues: issues
        };
    }

    async function testWebhook() {
        const validation = validateWebhookSettings();
        
        if (!validation.valid) {
            const criticalIssues = validation.issues.filter(issue => 
                !issue.includes('–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ')
            );
            
            if (criticalIssues.length > 0) {
                throw new Error(`–ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: ${criticalIssues.join(', ')}`);
            }
        }

        const testPayload = {
            name: SettingsManager.getSettings().userName || 'Test User',
            date: new Date().toISOString(),
            tg_id: SettingsManager.getSettings().telegramId || 'test_id',
            text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç NexaraBot Transcriber'
        };

        const activeWebhook = SettingsManager.getActiveWebhook();
        
        try {
            const response = await fetch(activeWebhook.url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(testPayload)
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status} ${response.statusText}`);
            }

            logActivity(`‚úÖ –¢–µ—Å—Ç webhook "${activeWebhook.name}" —É—Å–ø–µ—à–µ–Ω`, 'success');
            return true;
            
        } catch (error) {
            logActivity(`‚ùå –¢–µ—Å—Ç webhook –Ω–µ –ø—Ä–æ—à–µ–ª: ${error.message}`, 'error');
            throw error;
        }
    }

    return {
        send,
        validateWebhookSettings,
        testWebhook
    };

})();